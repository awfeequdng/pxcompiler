#include "parser/token.h"

namespace parser
{
// std::unordered_map<int, std::string> keywordMap {
//     {tok_False, "False"},
//     {tok_None, "None"},
//     {tok_True, "True"},
//     {tok_and, "and"},
//     {tok_as, "as"},
//     {tok_assert, "assert"},
//     {tok_break, "break"},
//     {tok_class, "class"},
//     {tok_continue, "continue"},
//     {tok_def, "def"},
//     {tok_del, "del"},
//     {tok_elif, "elif"},
//     {tok_else, "else"},
//     {tok_except, "except"},
//     {tok_finally, "finally"},
//     {tok_for, "for"},
//     {tok_from, "from"},
//     {tok_global, "global"},
//     {tok_if, "if"},
//     {tok_import, "import"},
//     {in, "in"},
//     {tok_is, "is"},
//     {tok_lambda, "lambda"},
//     {tok_nonlocal, "nonlocal"},
//     {tok_not, "not"},
//     {tok_or, "or"},
//     {tok_pass, "pass"},
//     {tok_raise, "raise"},
//     {tok_return, "return"},
//     {tok_try, "try"},
//     {tok_while, "while"},
//     {tok_with, "with"},
//     {tok_yield, "yield"},
// };

std::unordered_map<std::string, int> Token::getKeywordMap() {
    return keywordMap;
}

std::unordered_map<std::string, int> Token::keywordMap {
    {"False", tok_False},
    {"None", tok_None},
    {"True", tok_True},
    {"and", tok_and},
    { "as", tok_as},
    {"assert", tok_assert},
    {"break", tok_break},
    {"class", tok_class},
    {"continue", tok_continue},
    {"def", tok_def},
    {"del", tok_del},
    {"elif", tok_elif},
    {"else", tok_else},
    {"except", tok_except},
    {"finally", tok_finally},
    {"for", tok_for},
    {"from", tok_from},
    {"global", tok_global},
    {"if", tok_if},
    {"import", tok_import},
    {"in", tok_in},
    {"is", tok_is},
    {"lambda", tok_lambda},
    {"nonlocal", tok_nonlocal},
    {"not", tok_not},
    {"or", tok_or},
    {"pass", tok_pass},
    {"raise", tok_raise},
    {"return", tok_return},
    {"try", tok_try},
    {"while", tok_while},
    {"with", tok_with},
    {"yield", tok_yield},
};
} // namespace parser
