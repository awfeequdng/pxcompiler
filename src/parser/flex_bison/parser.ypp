// PEG grammar for Python

// -----------------------------------------------------------------------------
// Bison Configuration
// -----------------------------------------------------------------------------

%require "3.2"
%language "c++"

// We don't need a separate header for Bison locations.
%define api.location.file none

// Use a type-safe C++ variant for semantic values
%define api.value.type variant

// Have Bison generate the functions ‘make_TEXT’ and ‘make_NUMBER’, but also
// ‘make_YYEOF’, for the end of input.
%define api.token.constructor

// Generate the parser as `::pxcompiler::Parser`.
%define api.namespace { pxcompiler }
%define api.parser.class { Parser }

// Enable support for parser debugging
%define parse.trace true

// Generate location structs.
%locations


// Parameters to the parser and lexer.
//
// Parameters to the parser are stored therein as protected data members, and
// thus available to its methods.

// "inout" parameters passed to both the parser and the lexer.
%param {pxcompiler::Nonnull<pxcompiler::Arena*> arena}
%param {yyscan_t yyscanner}
%param {ParseAndLexContext& context}

// "out" parameter passed to the parser, where the AST is written.
%parse-param {std::optional<pxcompiler::ASTPtr>* ast}

%code top {
  #include <algorithm>
  #include <cstdarg>
  #include <cstdio>
  #include <cstdlib>
  #include <vector>

  #include "common/check.h"
  #include "parser/flex_bison/parse_and_lex_context.h"
  #include "llvm/ADT/StringExtras.h"
  #include "llvm/Support/raw_ostream.h"
}  // %code top


%code requires {
  #include <optional>

  #include "ast/ast.h"
  #include "common/arena.h"
  #include "common/nonnull.h"
  #include "parser/flex_bison/semantics.h"

  namespace pxcompiler {
  class ParseAndLexContext;
  }  // namespace flex_bison

  typedef void* yyscan_t;
}  // %code requires


%code {
  void pxcompiler::Parser::error(const location_type&, const std::string& message) {
    context.RecordSyntaxError(message);
  }
}  // %code

%token <int> integer_literal
%token <std::string> identifier
%token <std::string> sized_type_literal
%token <std::string> string_literal

%token
  // Most tokens have their spelling defined in lexer.lpp.
  // table-begin
  FALSE
  TRUE
  NONE
  AND
  AS
  ASSERT
  ASYNC
  AWAIT
  BREAK
  CLASS
  CONTINUE
  DEF
  DEL
  ELIF
  ELSE
  EXCEPT
  FINALLY
  FOR
  FROM
  GLOBAL
  IF
  IMPORT
  IN
  IS
  LAMBDA
  NONLOCAL
  NOT
  OR
  PASS
  RETURN
  TRY
  WHILE
  WITH
  YIELD
  ARROW
  AMPERSAND
  COLON
  COLON_BANG
  COMMA
  DOUBLE_ARROW
  EQUAL
  EQUAL_EQUAL
  LEFT_CURLY_BRACE
  LEFT_PARENTHESIS
  LEFT_SQUARE_BRACKET
  MINUS
  PERIOD
  PLUS
  RIGHT_CURLY_BRACE
  RIGHT_PARENTHESIS
  RIGHT_SQUARE_BRACKET
  SELF
  SEMICOLON
  SLASH
  UNDERSCORE
  // Used to track EOF.
  END_OF_FILE 0

  // The lexer determines the arity and fixity of each `*` based on whitespace
  // and adjacent tokens. UNARY_STAR indicates that the operator is unary but
  // could be either prefix or postfix.
  UNARY_STAR "unary *"
  PREFIX_STAR "prefix *"
  POSTFIX_STAR "postfix *"
  BINARY_STAR "binary *"
;

%type <pxcompiler::Nonnull<pxcompiler::Statement*>> script_unit
%type <pxcompiler::Nonnull<pxcompiler::Statement*>> statement
%type <pxcompiler::Nonnull<pxcompiler::Statement*>> expression_statment
%type <pxcompiler::Nonnull<pxcompiler::Statement*>> single_line_statement
%type <pxcompiler::Nonnull<pxcompiler::Expression*>> expr
%type <pxcompiler::Nonnull<pxcompiler::Name*>> id

%start units

%%
// The order of rules does not matter in Bison (unlike in ANTLR). The
// precedence is specified not by the order but by %left and %right directives
// as well as with %dprec.

// ----------------------------------------------------------------------------
// Top level rules to be used for parsing.

// Higher %dprec means higher precedence
units
    : units script_unit   { RESULT($2); }
    | script_unit         { RESULT($1); }
    | sep
    ;

script_unit
    : statement
    ;

statement
    : single_line_statement sep { $$ = $1; }
//    | multi_line_statement
//    | multi_line_statement sep { $$ = $1; }
    ;


single_line_statement
    : expression_statment
//    | assert_statement
//    | assignment_statement
//    | augassign_statement
//    | ann_assignment_statement
//    | pass_statement
//    | delete_statement
//    | return_statement
//    | raise_statement
//    | break_statement
//    | continue_statement
//    | import_statement
//    | global_statement
//    | if_statement_single
//    | nonlocal_statement
    ;

expression_statment
    : expr { $$ = EXPR_01($1, context.source_loc()); }
    ;

expr
    : id { $$ = $1; }
   // | TK_INTEGER { $$ = INTEGER($1, @$); }
   // | string { $$ = $1; }
   // | TK_REAL { $$ = FLOAT($1, @$); }
   // | TK_IMAG_NUM { $$ = COMPLEX($1, @$); }
   // | TK_TRUE { $$ = BOOL(true, @$); }
   // | TK_FALSE { $$ = BOOL(false, @$); }
   // | KW_NONE { $$ = NONE(@$); }
   // | TK_ELLIPSIS { $$ = ELLIPSIS(@$); }
   // | "(" expr ")" { $$ = $2; }
   // | "(" ")" { $$ = TUPLE_EMPTY(@$); }
   // | function_call { $$ = $1; }
   // | subscription { $$ = $1; }
   // | "[" expr_list_opt "]" { $$ = LIST($2, @$); }
   // | "[" expr_list "," "]" { $$ = LIST($2, @$); }
   // | "{" expr_list "}" { $$ = SET($2, @$); }
   // | "{" expr_list "," "}" { $$ = SET($2, @$); }
   // | expr "." id { $$ = ATTRIBUTE_REF($1, $3, @$); }

   // | "{" "}" { $$ = DICT_01(@$); }
   // | "{" dict_list "}" { $$ = DICT_02($2, @$); }
   // | KW_AWAIT expr %prec AWAIT { $$ = AWAIT($2, @$); }
   // | KW_YIELD %prec YIELD { $$ = YIELD_01(@$); }
   // | KW_YIELD expr %prec YIELD { $$ = YIELD_02($2, @$); }
   // | id ":=" expr { $$ = NAMEDEXPR($1, $3, @$); }
   // | "*" expr { $$ = STARRED_ARG($2, @$); }

   // | expr "+" expr { $$ = BINOP($1, Add, $3, @$); }
   // | expr "-" expr { $$ = BINOP($1, Sub, $3, @$); }
   // | expr "*" expr { $$ = BINOP($1, Mult, $3, @$); }
   // | expr "/" expr { $$ = BINOP($1, Div, $3, @$); }
   // | expr "%" expr { $$ = BINOP($1, Mod, $3, @$); }
   // | "-" expr %prec UNARY { $$ = UNARY($2, USub, @$); }
   // | "+" expr %prec UNARY { $$ = UNARY($2, UAdd, @$); }
   // | "~" expr %prec UNARY { $$ = UNARY($2, Invert, @$); }
   // | expr "**" expr { $$ = BINOP($1, Pow, $3, @$); }
   // | expr "//" expr { $$ = BINOP($1, FloorDiv, $3, @$); }
   // | expr "@" expr { $$ = BINOP($1, MatMult, $3, @$); }

   // | expr "&" expr { $$ = BINOP($1, BitAnd, $3, @$); }
   // | expr "|" expr { $$ = BINOP($1, BitOr, $3, @$); }
   // | expr "^" expr { $$ = BINOP($1, BitXor, $3, @$); }
   // | expr "<<" expr { $$ = BINOP($1, LShift, $3, @$); }
   // | expr ">>" expr { $$ = BINOP($1, RShift, $3, @$); }

   // | expr "==" expr { $$ = COMPARE($1, Eq, $3, @$); }
   // | expr "!=" expr { $$ = COMPARE($1, NotEq, $3, @$); }
   // | expr "<" expr { $$ = COMPARE($1, Lt, $3, @$); }
   // | expr "<=" expr { $$ = COMPARE($1, LtE, $3, @$); }
   // | expr ">" expr { $$ = COMPARE($1, Gt, $3, @$); }
   // | expr ">=" expr { $$ = COMPARE($1, GtE, $3, @$); }
   // | expr "is" expr { $$ = COMPARE($1, Is, $3, @$); }
   // | expr "is not" expr { $$ = COMPARE($1, IsNot, $3, @$); }
   // | expr "in" expr { $$ = COMPARE($1, In, $3, @$); }
   // | expr "not in" expr { $$ = COMPARE($1, NotIn, $3, @$); }

   // | expr "and" expr { $$ = BOOLOP($1, And, $3, @$); }
   // | expr "or" expr { $$ = BOOLOP($1, Or, $3, @$); }
   // | "not" expr { $$ = UNARY($2, Not, @$); }

   // // Comprehension
   // | "[" expr comp_for_items "]" { $$ = LIST_COMP_1($2, $3, @$); }
   // | "{" expr comp_for_items "}" { $$ = SET_COMP_1($2, $3, @$); }
   // | "{" expr ":" expr comp_for_items "}" { $$ = DICT_COMP_1($2, $4, $5, @$); }

   // | ternary_if_statement { $$ = $1; }
   // | lambda_expression { $$ = $1; }
    ;

id
    : identifier { $$ = SYMBOL($1, context.source_loc()); }
    ;

sep
    : ";"
    ;
%%